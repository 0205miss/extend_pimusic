"use strict";
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/indent */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageHandler = void 0;
/**
 * Handler for messages
 */
var MessageHandler = /** @class */ (function () {
    function MessageHandler() {
    }
    /**
     * @returns the host platform URL of the application
     */
    MessageHandler.getHostPlatformURL = function () {
        return MessageHandler.sandboxMode ? 'https://sandbox.minepi.com' : 'https://app-cdn.minepi.com';
    };
    /**
     * @param sandboxMode - True if in sandbox, false otherwhise
     */
    MessageHandler.setSandboxMode = function (sandboxMode) {
        MessageHandler.sandboxMode = sandboxMode;
    };
    /**
     * Send a message to the Pi Network hosting page
     *
     * @param message - The message to send
     * @returns the message returned by the Pi Network hosting page
     */
    MessageHandler.sendSDKMessage = function (message) {
        var id = MessageHandler.lastEmittedId++;
        var messageToSend = __assign({ id: id }, message);
        var hostPlatformURL = MessageHandler.getHostPlatformURL();
        window.parent.postMessage(JSON.stringify(messageToSend), hostPlatformURL);
        return new Promise(function (resolve, reject) {
            MessageHandler.emittedPromises[id] = { resolve: resolve, reject: reject };
            setTimeout(function () {
                reject(new Error("Messaging promise with id " + id + " timed out after 60000ms."));
            }, 6e4);
        });
    };
    /**
     * Handle message events
     *
     * @param event - The message event received
     */
    MessageHandler.handleIncomingMessage = function (event) {
        var parsedData;
        try {
            parsedData = JSON.parse(event.data);
            if (parsedData.id === null) {
                throw new Error('No id found in message response');
            }
            if (!(parsedData.id in MessageHandler.emittedPromises)) {
                throw new Error("No emitted promise found for native messaging response id " + parsedData.id);
            }
            MessageHandler.emittedPromises[parsedData.id].resolve(parsedData);
            delete MessageHandler.emittedPromises[parsedData.id];
        }
        catch (error) {
            if (parsedData.id === null) {
                console.error(
                // eslint-disable-next-line max-len
                'Native messaging: error when handling incoming message (possible response?). Error is logged below.');
                console.error(error);
                console.error(event.data);
                return;
            }
            console.error("Native messaging: error when handling response for message id " + parsedData.id + ". Error is logged below.");
            console.error(error);
            console.error(event.data);
            if (parsedData.id in MessageHandler.emittedPromises) {
                MessageHandler.emittedPromises[parsedData.id].reject(error);
            }
        }
    };
    /**
     * Last emitted message id
     */
    MessageHandler.lastEmittedId = 0;
    /**
     * A list of emitted promises
     */
    MessageHandler.emittedPromises = {};
    /**
     * Whether the application is executed in the Pi Network sandbox
     */
    MessageHandler.sandboxMode = false;
    return MessageHandler;
}());
exports.MessageHandler = MessageHandler;
window.addEventListener('message', function (message) { return MessageHandler.handleIncomingMessage(message); });

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestHandler = void 0;
var axios_1 = __importDefault(require("axios"));
var MessageTypes_1 = require("../MessageTypes");
var getTime_1 = require("../util/getTime");
var postNetworkError = '/network/error';
/**
 * Handler for requests
 */
var RequestHandler = /** @class */ (function () {
    function RequestHandler() {
        RequestHandler.instance = this;
    }
    /**
     * Get the instance of the request handler or create a new one if not found
     *
     * @returns the instance of the request handler
     */
    RequestHandler.getInstance = function () {
        return RequestHandler.instance ? RequestHandler.instance : new RequestHandler();
    };
    /**
     * Initialize the request handler
     *
     * @param applicationInformation - The application information
     */
    RequestHandler.prototype.init = function (applicationInformation) {
        this.accessToken = applicationInformation.accessToken;
        this.backendURL = applicationInformation.backendURL;
        this.frontendURL = applicationInformation.frontendURL;
        this.createAxios();
    };
    RequestHandler.prototype.createAxios = function () {
        if (!this.backendURL) {
            return;
        }
        this.axiosClient = axios_1.default.create({ baseURL: this.backendURL, timeout: 20000 });
    };
    /**
     * Handle axios request error
     *
     * @param error - The error of an Axios request
     */
    RequestHandler.prototype.handleError = function (error) {
        var _a;
        var errorCode = (_a = error.response) === null || _a === void 0 ? void 0 : _a.status;
        this.sendMessageToPiNetwork({
            type: errorCode !== 401 && errorCode !== 403 ? MessageTypes_1.MessageType.UNKNOWN_ERROR : MessageTypes_1.MessageType.AUTH_ERROR,
        });
    };
    Object.defineProperty(RequestHandler.prototype, "options", {
        /**
         * Get options for axios API requests
         *
         * @returns The API request options
         */
        get: function () {
            return {
                headers: this.accessToken ? { Authorization: 'Bearer ' + this.accessToken } : {},
            };
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Perform a GET API request with the axios client
     *
     * @param route - The URL of the GET request
     * @returns The result of the request if no error occurred
     */
    RequestHandler.prototype.get = function (route) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.axiosClient) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.axiosClient
                                .get(route, this.options)
                                .catch(function (error) { return _this.handleError(error); })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response && response.data];
                }
            });
        });
    };
    /**
     * Perform a POST API request with the axios client
     *
     * @param route - The URL of the GET request
     * @param payload - The data to post
     * @returns The result of the request if no error occurred
     */
    RequestHandler.prototype.post = function (route, payload) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.axiosClient) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.axiosClient
                                .post(route, payload, this.options)
                                .catch(function (error) { return _this.handleError(error); })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response && response.data];
                }
            });
        });
    };
    /**
     * Send a message to the Pi Network hosting page
     *
     * @param message - The message to send
     */
    RequestHandler.prototype.sendMessageToPiNetwork = function (message) {
        if (!this.frontendURL) {
            return;
        }
        window.parent.postMessage(JSON.stringify(message), this.frontendURL);
    };
    /**
     * Wait for a specific message of the Pi Network hosting page
     *
     * @param awaitedMessage - The awaited message
     * @returns The expected message if received before timeout
     */
    RequestHandler.prototype.waitForAction = function (awaitedMessage) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var timeout = window.setTimeout(function () {
                reject('timeout');
            }, 60000);
            window.addEventListener('message', function (event) {
                var data = _this.handlePiNetworkMessage(event, awaitedMessage);
                if (!data) {
                    return;
                }
                window.clearTimeout(timeout);
                resolve(data);
            });
        });
    };
    /**
     * Handle message sent by the Pi Network hosting page
     *
     * @param event - The received message event
     * @param awaitedMessage - The expected message
     * @returns The data of the received message if it match the expected one
     */
    RequestHandler.prototype.handlePiNetworkMessage = function (event, awaitedMessage) {
        var parsedData;
        try {
            parsedData = JSON.parse(event.data);
        }
        catch (_a) {
            console.warn('Error while parsing request', event, event.data);
            return;
        }
        if (!parsedData) {
            console.warn('Unable to parse action');
            return;
        }
        if (parsedData.type === awaitedMessage.type) {
            return parsedData;
        }
    };
    /**
     * Report an error to the Pi Network Core Team
     *
     * @param action - The action that was running when the error occurred
     * @param message - A message about the error
     * @param data - Some informations returned by the error
     */
    RequestHandler.prototype.reportError = function (action, message, data) {
        this.post(postNetworkError, {
            error: {
                time: getTime_1.getDateTime(),
                call: action,
                message: message,
                data: data,
            },
        });
    };
    return RequestHandler;
}());
exports.RequestHandler = RequestHandler;

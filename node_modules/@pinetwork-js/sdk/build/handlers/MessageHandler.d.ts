import { APIPayment } from '@pinetwork-js/api-typing';
import { MessageType } from '../MessageTypes';
import { APIScopes } from '../PiClient';
interface ShareDialogPayload {
    /**
     * The title of the shared message
     */
    title: string;
    /**
     * The shared message
     */
    sharingMessage: string;
}
interface ConversationPayload {
    /**
     * The conversation id
     */
    conversationId: number;
}
interface PaymentErrorPayload {
    /**
     * The payment error
     */
    paymentError: any;
}
interface StartPaymentFlowPayload {
    /**
     * The payment id
     */
    paymentId: string;
}
interface OpenConsentModal {
    /**
     * The requested scopes
     */
    scopes: APIScopes[];
}
export interface Message<T extends MessageType> {
    /**
     * The type of the message
     */
    type: MessageType;
    /**
     * The payload of the message
     */
    payload?: T extends MessageType.OPEN_APP_CONVERSATION_WITH_ID ? ConversationPayload : T extends MessageType.OPEN_SHARE_DIALOG_ACTION ? ShareDialogPayload : T extends MessageType.SHOW_PRE_PAYMENT_ERROR ? PaymentErrorPayload : T extends MessageType.START_PAYMENT_FLOW ? StartPaymentFlowPayload : T extends MessageType.OPEN_CONSENT_MODAL ? OpenConsentModal : Record<string, never>;
}
export interface SDKApplicationInformation {
    /**
     * The application access token
     */
    accessToken: string;
    /**
     * The application backend url
     */
    backendURL: string;
    /**
     * The application frontend url
     */
    frontendURL: string;
}
declare type SDKPreparePaymentFlow = {
    /**
     * Whether there is a pending transaction or not
     */
    pending: false;
} | {
    /**
     * Whether there is a pending transaction or not
     */
    pending: true;
    /**
     * The pending transaction
     */
    pendingPayment: APIPayment;
};
interface SDKStartPaymentFlow {
    /**
     * Whether the payment flow started successfully or not
     */
    success: boolean;
}
interface SDKTransaction {
    /**
     * Whether the transaction has been cancelled or not
     */
    cancelled: boolean;
    /**
     * The payment id
     */
    paymentId: string;
    /**
     * The transaction id
     */
    txid: string;
}
declare type SDKOpenConsentModal = {
    /**
     * Whether or not the user gave his consent for the requested scopes
     */
    success?: boolean;
    /**
     * Whether or not the user gave his consent for the requested scopes
     */
    cancelled?: boolean;
};
export interface SDKMessage<T extends MessageType> {
    /**
     * The id of the message
     */
    id: number;
    /**
     * The payload of the message
     */
    payload: T extends MessageType.COMMUNICATION_INFORMATION_REQUEST ? SDKApplicationInformation : T extends MessageType.PREPARE_PAYMENT_FLOW ? SDKPreparePaymentFlow : T extends MessageType.START_PAYMENT_FLOW ? SDKStartPaymentFlow : T extends MessageType.WAIT_FOR_TRANSACTION ? SDKTransaction : T extends MessageType.OPEN_CONSENT_MODAL ? SDKOpenConsentModal : Record<string, never>;
}
interface PromiseLike {
    resolve: <T extends MessageType>(message: SDKMessage<T>) => void;
    reject: (reason?: any) => void;
}
/**
 * Handler for messages
 */
export declare class MessageHandler {
    /**
     * Last emitted message id
     */
    static lastEmittedId: number;
    /**
     * A list of emitted promises
     */
    static emittedPromises: Record<number, PromiseLike>;
    /**
     * Whether the application is executed in the Pi Network sandbox
     */
    private static sandboxMode;
    /**
     * @returns the host platform URL of the application
     */
    static getHostPlatformURL(): string;
    /**
     * @param sandboxMode - True if in sandbox, false otherwhise
     */
    static setSandboxMode(sandboxMode: boolean): void;
    /**
     * Send a message to the Pi Network hosting page
     *
     * @param message - The message to send
     * @returns the message returned by the Pi Network hosting page
     */
    static sendSDKMessage<M extends Message<M['type']>>(message: M): Promise<SDKMessage<M['type']>>;
    /**
     * Handle message events
     *
     * @param event - The message event received
     */
    static handleIncomingMessage(event: MessageEvent): void;
}
export {};

import { APIPartialPayment, APIPayment, APIPaymentTransaction } from '@pinetwork-js/api-typing';
export interface PaymentCallbacks {
    /**
     * Callback function triggered when a payment is ready to be approved by the server
     */
    onReadyForServerApproval: (paymentId: APIPayment['identifier']) => void;
    /**
     * Callback function triggered when a payment is ready to be completed by the server
     */
    onReadyForServerCompletion: (paymentId: APIPayment['identifier'], txid: APIPaymentTransaction['txid']) => void;
    /**
     * Callback function triggered when a payment is cancelled
     */
    onCancel: (paymentId: APIPayment['identifier']) => void;
    /**
     * Callback function triggered when an error occurs
     */
    onError: (error: Error, payment?: APIPayment) => void;
}
/**
 * Handler for payments
 */
export declare class PaymentHandler {
    /**
     * Information about the payment
     */
    readonly paymentData: APIPartialPayment;
    /**
     * Callback functions for the payment process
     */
    readonly callbacks: PaymentCallbacks;
    /**
     * Callback function triggered if an incomplete payment is found
     */
    readonly onIncompletePaymentFound: (payment: APIPayment) => void;
    constructor(
    /**
     * Information about the payment
     */
    paymentData: APIPartialPayment, 
    /**
     * Callback functions for the payment process
     */
    callbacks: PaymentCallbacks, 
    /**
     * Callback function triggered if an incomplete payment is found
     */
    onIncompletePaymentFound: (payment: APIPayment) => void);
    /**
     * Run the payment flow
     */
    runPaymentFlow(): Promise<void>;
    /**
     * Check if there is a pending payment
     *
     * @param onIncompletePaymentFound - Callback function triggered if an incomplete payment is found
     */
    static checkForPendingPayment(onIncompletePaymentFound: (payment: APIPayment) => void): Promise<void>;
}

import { RoutePayload, RouteResult, Route } from '@pinetwork-js/api-typing';
import { AxiosError, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Message, SDKApplicationInformation } from './MessageHandler';
/**
 * Handler for requests
 */
export declare class RequestHandler {
    /**
     * Singleton instance of the class
     */
    static instance?: RequestHandler;
    /**
     * The application access token
     */
    accessToken?: string;
    /**
     * The application backend url
     */
    backendURL?: string;
    /**
     * The application frontend url
     */
    frontendURL?: string;
    /**
     * The axios client for the requests
     */
    axiosClient?: AxiosInstance;
    private constructor();
    /**
     * Get the instance of the request handler or create a new one if not found
     *
     * @returns the instance of the request handler
     */
    static getInstance(): RequestHandler;
    /**
     * Initialize the request handler
     *
     * @param applicationInformation - The application information
     */
    init(applicationInformation: SDKApplicationInformation): void;
    private createAxios;
    /**
     * Handle axios request error
     *
     * @param error - The error of an Axios request
     */
    handleError(error: AxiosError): void;
    /**
     * Get options for axios API requests
     *
     * @returns The API request options
     */
    get options(): AxiosRequestConfig;
    /**
     * Perform a GET API request with the axios client
     *
     * @param route - The URL of the GET request
     * @returns The result of the request if no error occurred
     */
    get<T extends Route<any>>(route: T): Promise<RouteResult<T> | undefined>;
    /**
     * Perform a POST API request with the axios client
     *
     * @param route - The URL of the GET request
     * @param payload - The data to post
     * @returns The result of the request if no error occurred
     */
    post<T extends Route<any, undefined>>(route: T, payload: RoutePayload<T>): Promise<RouteResult<T> | undefined>;
    /**
     * Send a message to the Pi Network hosting page
     *
     * @param message - The message to send
     */
    sendMessageToPiNetwork<M extends Message<M['type']>>(message: M): void;
    /**
     * Wait for a specific message of the Pi Network hosting page
     *
     * @param awaitedMessage - The awaited message
     * @returns The expected message if received before timeout
     */
    waitForAction<M extends Message<M['type']>>(awaitedMessage: M): Promise<M>;
    /**
     * Handle message sent by the Pi Network hosting page
     *
     * @param event - The received message event
     * @param awaitedMessage - The expected message
     * @returns The data of the received message if it match the expected one
     */
    handlePiNetworkMessage<M extends Message<M['type']>>(event: MessageEvent, awaitedMessage: M): any | void;
    /**
     * Report an error to the Pi Network Core Team
     *
     * @param action - The action that was running when the error occurred
     * @param message - A message about the error
     * @param data - Some informations returned by the error
     */
    reportError(action: string, message: string, data?: any): void;
}

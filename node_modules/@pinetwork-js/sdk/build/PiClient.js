"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PiClient = void 0;
var api_typing_1 = require("@pinetwork-js/api-typing");
var MessageHandler_1 = require("./handlers/MessageHandler");
var PaymentHandler_1 = require("./handlers/PaymentHandler");
var RequestHandler_1 = require("./handlers/RequestHandler");
var MessageTypes_1 = require("./MessageTypes");
/**
 * Available SDK versions
 */
var versions = ['2.0'];
/**
 * Main class of the SDK
 */
var PiClient = /** @class */ (function () {
    function PiClient() {
        /**
         * Whether the SDK is ready to be used or not
         */
        this.initialized = false;
        /**
         * The request handler for API requests
         */
        this.api = RequestHandler_1.RequestHandler.getInstance();
    }
    /**
     * Initialize the SDK
     *
     * @param options - Options to initialize the SDK
     */
    PiClient.prototype.init = function (options) {
        if (!versions.includes(options.version)) {
            throw new Error('Unrecognized version number');
        }
        if (options.sandbox) {
            MessageHandler_1.MessageHandler.setSandboxMode(true);
        }
        this.initialized = true;
    };
    /**
     * Authenticate the user
     *
     * @param scopes - The list of requested scopes
     * @param onIncompletePaymentFound - Callback function triggered if an incomplete payment is found
     * @returns information about the authenticated user
     */
    PiClient.prototype.authenticate = function (scopes, onIncompletePaymentFound) {
        return __awaiter(this, void 0, void 0, function () {
            var scopeConsentResult, _a, applicationInformationMessage, _b, applicationInformation, user, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!this.initialized) {
                            throw new Error('Pi Network SDK was not initialized. Call init() before any other method.');
                        }
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, MessageHandler_1.MessageHandler.sendSDKMessage({
                                type: MessageTypes_1.MessageType.OPEN_CONSENT_MODAL,
                                payload: {
                                    scopes: scopes,
                                },
                            })];
                    case 2:
                        scopeConsentResult = _d.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _d.sent();
                        throw new Error('User consent cancelled.');
                    case 4:
                        if (scopeConsentResult.payload.cancelled) {
                            throw new Error('User consent cancelled.');
                        }
                        _d.label = 5;
                    case 5:
                        _d.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, MessageHandler_1.MessageHandler.sendSDKMessage({
                                type: MessageTypes_1.MessageType.COMMUNICATION_INFORMATION_REQUEST,
                            })];
                    case 6:
                        applicationInformationMessage = _d.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        _b = _d.sent();
                        throw new Error('Authentication failed.');
                    case 8:
                        applicationInformation = applicationInformationMessage.payload;
                        this.api.init(applicationInformation);
                        this.onIncompletePaymentFound = onIncompletePaymentFound;
                        _d.label = 9;
                    case 9:
                        _d.trys.push([9, 11, , 12]);
                        return [4 /*yield*/, this.api.get(api_typing_1.routes.getAuthenticatedUser)];
                    case 10:
                        user = _d.sent();
                        return [3 /*break*/, 12];
                    case 11:
                        _c = _d.sent();
                        throw new Error('Authentication failed.');
                    case 12:
                        if (!user || !this.api.accessToken) {
                            throw new Error('Authentication failed.');
                        }
                        PaymentHandler_1.PaymentHandler.checkForPendingPayment(onIncompletePaymentFound);
                        return [2 /*return*/, { user: user, accessToken: this.api.accessToken }];
                }
            });
        });
    };
    /**
     * Create a payment
     *
     * @param paymentData - The information about the payment
     * @param callbacks - Callback functions for the payment process
     * @returns the payment handler for the created payment
     */
    PiClient.prototype.createPayment = function (paymentData, callbacks) {
        if (!this.initialized) {
            throw new Error('Pi Network SDK was not initialized. Call init() before any other method.');
        }
        return new PaymentHandler_1.PaymentHandler(paymentData, callbacks, this.onIncompletePaymentFound);
    };
    /**
     * Open the share dialog
     *
     * @param title - The title of the message
     * @param sharingMessage - The message to share
     */
    PiClient.prototype.openShareDialog = function (title, sharingMessage) {
        if (!this.initialized) {
            throw new Error('Pi Network SDK was not initialized. Call init() before any other method.');
        }
        MessageHandler_1.MessageHandler.sendSDKMessage({
            type: MessageTypes_1.MessageType.OPEN_SHARE_DIALOG_ACTION,
            payload: { title: title, sharingMessage: sharingMessage },
        });
    };
    /**
     * Open a conversation
     *
     * @param conversationId - The conversation id
     */
    PiClient.prototype.openConversation = function (conversationId) {
        if (!this.initialized) {
            throw new Error('Pi Network SDK was not initialized. Call init() before any other method.');
        }
        MessageHandler_1.MessageHandler.sendSDKMessage({
            type: MessageTypes_1.MessageType.OPEN_APP_CONVERSATION_WITH_ID,
            payload: { conversationId: conversationId },
        });
    };
    return PiClient;
}());
exports.PiClient = PiClient;

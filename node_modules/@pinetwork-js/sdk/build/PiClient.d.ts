import { APIPartialPayment, APIPayment, APIUser } from '@pinetwork-js/api-typing';
import { PaymentCallbacks, PaymentHandler } from './handlers/PaymentHandler';
import { RequestHandler } from './handlers/RequestHandler';
/**
 * Available SDK versions
 */
declare const versions: readonly ["2.0"];
interface ClientInitOptions {
    /**
     * The version of the SDK
     */
    version: typeof versions[number];
    /**
     * Whether the application is executed in the Pi Network sandbox
     */
    sandbox?: boolean;
}
/**
 * Available API scopes
 */
export declare type APIScopes = 'username' | 'payments' | 'roles';
export interface AuthResult {
    /**
     * The application access token
     */
    accessToken: string;
    /**
     * The authenticated user
     */
    user: APIUser;
}
/**
 * Main class of the SDK
 */
export declare class PiClient {
    /**
     * Whether the SDK is ready to be used or not
     */
    initialized: boolean;
    /**
     * The request handler for API requests
     */
    api: RequestHandler;
    /**
     * Callback function triggered if an incomplete payment is found during the process of
     * authentication or payment creation
     */
    onIncompletePaymentFound: (payment: APIPayment) => void;
    /**
     * Initialize the SDK
     *
     * @param options - Options to initialize the SDK
     */
    init(options: ClientInitOptions): void;
    /**
     * Authenticate the user
     *
     * @param scopes - The list of requested scopes
     * @param onIncompletePaymentFound - Callback function triggered if an incomplete payment is found
     * @returns information about the authenticated user
     */
    authenticate(scopes: APIScopes[], onIncompletePaymentFound: (payment: APIPayment) => void): Promise<AuthResult>;
    /**
     * Create a payment
     *
     * @param paymentData - The information about the payment
     * @param callbacks - Callback functions for the payment process
     * @returns the payment handler for the created payment
     */
    createPayment(paymentData: APIPartialPayment, callbacks: PaymentCallbacks): PaymentHandler;
    /**
     * Open the share dialog
     *
     * @param title - The title of the message
     * @param sharingMessage - The message to share
     */
    openShareDialog(title: string, sharingMessage: string): void;
    /**
     * Open a conversation
     *
     * @param conversationId - The conversation id
     */
    openConversation(conversationId: number): void;
}
export {};
